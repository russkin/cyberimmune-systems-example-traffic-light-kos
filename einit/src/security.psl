/* Security configuration of the "traffic light" example. */
/* nk.basic._ is required for comparison operations support in policies, like != below */
use nk.basic._

/* Definition of the execute interface. */
execute: kl.core.Execute

/* Import the file with the declaration of basic security policy aliases. */
use nk.base._

/* Declaration of entities. */
use EDL Einit
use EDL kl.core.Core
use EDL kl.VfsNet
use EDL kl.drivers.BSP
use EDL kl.drivers.GPIO
use EDL client.Client
use EDL server.Server
use EDL traffic_light.KlogEntity
use EDL traffic_light.KlogStorageEntity

use EDL traffic_light.ControlSystem
use EDL traffic_light.LightsGPIO
use EDL traffic_light.Diagnostics

/* Execution of entities allowed. */
execute {
    grant ()
}

/* Request messages allowed. */
request src=traffic_light.ControlSystem {
    grant ()
}


request src=traffic_light.ControlSystem dst=kl.core.Core {
    grant ()
}

request src=traffic_light.KlogEntity dst=traffic_light.KlogStorageEntity interface=kl.KlogStorage method=write { grant () }
response src=traffic_light.KlogStorageEntity dst=traffic_light.KlogEntity interface=kl.KlogStorage method=write { grant () }

request src=traffic_light.KlogEntity, dst=kl.core.Core {
    // Interface to the Synchronization service.
    match interface=kl.core.Sync { grant () }
    // Interface to the Task service.
    match interface=kl.core.Task {
        match method=FreeSelfEnv { grant () }
        match method=GetPath { grant () }
        match method=GetName { grant () }
        match method=Exit { grant () }
    }
    // Interface to the Virtual Memory Manager (VMM) service.
    match interface=kl.core.VMM { grant () }
    // Interface to the Thread service.
    match interface=kl.core.Thread { grant () }
    // Interface to the Hal service.
    match interface=kl.core.HAL, method=DebugWrite { grant () }
    match interface=kl.core.HAL, method=GetEnv { grant () }
    // Interface to the HandleManager service.
    match interface=kl.core.Handle { grant () }
    // Audit interface of the Vlog component.
    match interface=kl.core.Audit { grant () }
}

response src=kl.core.Core, dst=traffic_light.KlogEntity { grant () }

request src=traffic_light.KlogStorageEntity, dst=kl.core.Core {
    // Interface to the Synchronization service.
    match interface=kl.core.Sync { grant () }
    // Interface to the Task service.
    match interface=kl.core.Task {
        match method=FreeSelfEnv { grant () }
        match method=GetPath { grant () }
        match method=GetName { grant () }
        match method=Exit { grant () }
    }
    // Interface to the Virtual Memory Manager (VMM) service.
    match interface=kl.core.VMM { grant () }
    // Interface to the Thread service.
    match interface=kl.core.Thread { grant () }
    // Interface to the Hal service.
    match interface=kl.core.HAL, method=DebugWrite { grant () }
    match interface=kl.core.HAL, method=GetEnv { grant () }
    // Interface to the HandleManager service.
    match interface=kl.core.Handle { grant () }
}

response src=kl.core.Core, dst=traffic_light.KlogStorageEntity { grant () }

/*
request src=traffic_light.ControlSystem 
    dst=traffic_light.LightsGPIO 
    endpoint=lightsGpio.mode 
    method=FMode {
        grant()
}
*/


request src=traffic_light.ControlSystem 
    dst=traffic_light.LightsGPIO 
    endpoint=lightsGpio.mode 
    method=FMode {
        assert(bool.any([
            message.value == 0x10c,
            message.value == 0x102,
            message.value == 0x101,
            message.value == 0x301,
            message.value == 0x401,
            message.value == 0xc01,
            message.value == 0x201,
            message.value == 0x103,
            message.value == 0x104,
        ]))
}


request src=Einit {
    grant ()
}

request src=kl.core.Core {
    grant ()
}

request src=traffic_light.LightsGPIO dst=kl.core.Core {
    grant ()
}

request src=traffic_light.Diagnostics dst=kl.core.Core {
    grant ()
}

request src=kl.core.Core dst=traffic_light.Diagnostics {
    grant ()
}

/* Response messages allowed. */
response {
    grant ()
}

/*
response src=traffic_light.LightsGPIO 
    dst=traffic_light.ControlSystem 
    endpoint=lightsGpio.mode 
    method=FMode {
        assert (message.result < 0x1000404)
}
*/

error {
    grant ()
}

/* Calls to the security interface are ignored. */
security {
    grant ()
}

/**
 * Allows the tasks with the Einit class to start the tasks with the kl.VfsNet class.
 */
execute src=Einit, dst=kl.VfsNet
{
    grant()
}

/**
 * Allows the tasks with the kl.VfsNet class to send requests to the KasperskyOS kernel and get
 * responses. This enables the VfsNet program to use core endpoints.
 */
request src=kl.VfsNet, dst=kl.core.Core
{
    grant()
}

response src=kl.core.Core, dst=kl.VfsNet
{
    grant()
}

/**
 * Allows the tasks with the Einit class to start the tasks with the client.Client class.
 */
execute src=Einit, dst=client.Client
{
    grant()
}

/**
 * Allows the tasks with the Einit class to start the tasks with the server.Server class.
 */
execute src=Einit, dst=server.Server
{
    grant()
}

request src=client.Client, dst=kl.core.Core
{
    grant()
}

response src=kl.core.Core, dst=client.Client
{
    grant()
}

/**
 * Allows the tasks with the server.Server class to send requests to the KasperskyOS kernel and get
 * responses. This enables the Server program to use core endpoints.
 */
request src=server.Server, dst=kl.core.Core
{
    grant()
}

response src=kl.core.Core, dst=server.Server
{
    grant()
}

/**
 * Allows the tasks with the client.Client class to send requests
 * to tasks with the kl.VfsNet class and get responses.
 * This enables the Client program to communicate with the VfsNet program.
 */
request src=client.Client, dst=kl.VfsNet
{
    grant()
}


/**
 * Allows the tasks with the server.Server class to send requests
 * to tasks with the kl.VfsNet class and get responses.
 * This enables the Server program to communicate with the VfsNet program.
 */
request src=server.Server, dst=kl.VfsNet
{
    grant()
}

response src=kl.VfsNet, dst=server.Server
{
    grant()
}

response src=kl.VfsNet, dst=client.Client
{
    grant()
}


/**
 * Allows the tasks with the traffic_light.Diagnostics class to send requests
 * to tasks with the kl.VfsNet class and get responses.
 * This enables the Client program to communicate with the VfsNet program.
 */
request src = traffic_light.Diagnostics, dst = kl.VfsNet
{
    grant()
}

response src = kl.VfsNet, dst = traffic_light.Diagnostics
{
    grant()
}

/**
 * Allows the tasks with the kl.drivers.BSP class to send requests to the
 * KasperskyOS kernel and get responses. This enables the BSP driver to use
 * core endpoints.
 */
request src = kl.drivers.BSP, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.drivers.BSP
{
    grant()
}

execute src=Einit, dst=kl.drivers.GPIO
{
    grant()
}

/**
 * Allows the tasks with the kl.drivers.GPIO class
 * to send requests to the KasperskyOS kernel and get responses.
 * This enables the GPIO program to use core endpoints.
 */
request src = kl.drivers.GPIO, dst = kl.core.Core
{
    grant()
}

response src = kl.core.Core, dst = kl.drivers.GPIO
{
    grant()
}

response src=kl.core.Core, dst=traffic_light.Diagnostics
{
    grant()
}

policy object audit_trace : Base {}

request src=traffic_light.LightsGPIO,
    dst=traffic_light.Diagnostics,
    endpoint=diagnostics.report,
    method=report {
        audit_trace.grant()
}

response src=traffic_light.Diagnostics,
    endpoint=diagnostics.report,
    dst=traffic_light.LightsGPIO
    method=report {
        audit_trace.grant()
}

// We declare the profile for audit.
audit profile trace = {
    // Complete silence.
    0: {},
    // Only denied by kss.
    1: {
        base: {
            kss: [ "denied" ]
        },
    },
    // Only denied from everyone.
    2: {
        base: {
            kss: [ "denied" ]
        },
        audit_trace: {
            kss: [ "denied" ]
        }
    },
    // All listening.
    3: {
        base: {
            kss: [ "granted", "denied" ]
        },
        audit_trace: {
            kss: [ "granted", "denied" ]
        },
    },
    // audit_trace messages only
    4: {
        base: { kss: [] },
        audit_trace: {
            kss: [ "granted", "denied" ]
        },
    },
}
// We assign the level of the audit profile used by default.
audit default = trace 4
